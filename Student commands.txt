datetime - модуль для работы с датой и временем в наиболее удобной для человека форме.

datetime - предоставляет информацию о времени и дате по григорианскому календарю.
    date - предоставляет информацию о дате, без времени, по григорианскому календарю.
        .day - атрибут вернёт только день
        .month - атрибут вернёт только месяц
        .year -  атрибут вернёт только год
        .today() - метод вернёт текущую дату и время на компьютере
        .weekday() - предоставляет данные о дне недели (0 - пн, 6 - вс)
        .isoweekday() - предоставляет информацию о дне недели (1 - пн, 7 - вс)
        .min - атрибут возвращает минимально возможную дату
        .max - атрибут возвращает максимально возможную дату
        .fromordinal(<days>) - переводит переданное количество дней <days> в конкретную дату
        .toordinal(<date>) - переводит дату <date> в дни
    time() - предоставляет информация о времени до миллисекунды, без даты.
        .microsecond - информация о миллисекундах
        .second - информация о секундах
        .minute - информация о минутах
        .horse - информация о часах

    .replace() - заменяет формат даты-времени не используя удаление

timedelta - описывает период во времени между двумя различными моментами.
tzinfo  - предоставляет информация о часовом поясе.
timezone - описывает время, руководствуясь стандартом UTC.
str() - функция использующаяся по умолчанию за кулисами при выводе информации о дате. Включатся автоматически и преобразует информацию в читабельный для человек вид
repr() - функция преобразует информацию понятную интерпретатору, используется по умолчанию при каждом вводе данных
sorted() - функция сортирует список дат, времени, по опр. формату.
fromisoformat() - метод преобразовывает строку в дату по стандартам ISO.
combine() - объединение два типа данных <date> и <time> в один хранящий информацию о дате и времени одновременно
date() - отделяет дату
time() - отделяет время
now() - текущее локальное время, аналогичен методу today().
utcnow() - время по UTC-0
timestamp(<datatime>) - метод преобразовывает время в количество секунд прошедших с начала эпохи "1970"
fromtimestamp(<seconds>) - метод преобразовывает секунды в даты, относительно начала эпохи
.strptime(%d %h %M %Y) - формат для автоматическое форматирования даты времени на основе строки, необходимо указать на какой позиции находится значение

time - модуль позволяющий работать со временем
time() - функция возвращает количество секунд прошедших с начала эпохи
time_ns() - функция возвращаете количество нано секунд прошедших с начала эпохи
ctime() - функция возвращает локальное время на основе начала эпохи
sleep(<secs>) - функция принимает в качества аргумента secs количество секунд и останавливает выполнение программы на указанное время
monotonic() - функция для измерения времени работы программы, вне влияния ОС и IDE и др. факторов
monotonic_ns() - функция измерения работы программы в наносекундах
perf_counter() - наивысшую, научную, точность позволяет реализовать данная функция. Функция предназначена для коротких интервалов
perf_counter_ns() - аналогична функции perf_counter, но замеры производятся в нано секундах. Функция предназначена для сверх малых интервалов

Calendar - модуль посвящён работе с календарём
.day_name - атрибут возвращает имя дня недели на английском
.day_abbr - атрибут возвращает сокращённы варианты дней недели
.month_name - атрибут возвращает имя дня месяца
.month_abbr - атрибут вернёт сокращённое имя для месяца
.MONDAY - атрибут вернёт 0
...
.SUNDAY - атрибут вернёт 6
setfirstweenday() - изменяет стандартное значение первого дня недели
firstweekday() - функция вернёт целое число означающее первый день недели установленный по умолчанию
isleap() - функция проверяет год на високосность
leapdays(y1, y2) - функция возвращает количество високосных лет между y1 и y2
weekday(y, m, d) - функция возвращает целое число соответсвующее дню недели по заданным параметрам
monthrange(y, m) - функция возвращает день недели первого дня месяца и кол-во дней в месяце
monthcalendar(y, m) - функция возвращает матрицу дней недели
month(y, m, w, l) - функция возвращает календарный месяц. y- год, m- месяц, w- ширина календаря, l- количество строк, отводимые на неделю
calendar(y, w, l, c, m) - возвращает весь календарный год в виде многострочной структуры. c- кол-во пробелов между столбцами месяцев, m- кол-во столбцев


Потоковый ввод stdin, потоковый вывод stdout
read() - метод считывает поток данных, если в нём нет разделителей '\n'
readlines() - метод считывает строки данных из потока ввода, если есть разделители строк '\n'
write() - потоковый вывод данных, где необходимо самостоятельно указывать форматирование строк, типизацию и д.р.


Работа с CSV - (Comma Separated Values, значения разделённые запятыми)
Работа с TSV - (Tab Separated Values, значение разделённые табуляцией)
Работа с DSV - (Delimiter Separated Values, значения разграниченные разделителями)
.splitlines() - метод для разбития строк с символом по умолчанию '\n'
.DictReader
enumerate() - функция для автоматической нумерации строк переданного списка
csv.reader() - итерируемый объект автоматические разбивающий строку на соответсвующую таблицу
csv.writer() - объект специализирующийся на записи данных в формат csv
delimiter - аргумент reader'а, отвечающий за знак радения используемый в файле, по умолчанию ','
quotechar - аргумент reader'а, отучающий за использование кавычек в полях в файле, по умолчанию "' '"


Работа с JSON - (JavaScrip Object Notation) - текстовой формат данных основанный на языке программирования JS.
dumps(<value>) - функция для сериализации python-значения <value> в json строку
dump(<value>) -  функция для сериализации python-значения <value> в json файл (запись в файл)
loads(<value>) - функция для десеарилизации строки формата json
load(<value>) - функция принимает в качестве аргумента файл, ввод и десериализует его (чтение из файла)

indent=<value> - аргумент задаёт отступы от левого края
sort_keys=True/False - аргумент сортировки ключей
separator(<value>, <value>) - аргумент форматирования json формата
skipkeys - для пропуска не сериализуемых значений
ensure_ascii=True/False - аргумент для устранения ошибок при чтении не на Английском.


Zip-архивы
zipfile - модуль для работы с фалами в формате zip
printdir() - метод для печати дерева каталогов в zip-архиве
infolist() - метод позволяет сохранить информацию о дереве zip-архива в виде спец. объекта ZipInfo
is_dir() - метод для проверки на папку или файл
namelist() - метод возвращает список всех имён файлов в архиве
getinfo() - метод позволяющий получить информацию о конкретном файле в архиве
read() - метод возвращает сырые байты почтённого файлы
    .decode() - атрибут позволяющий указать конкретную кодировку при чтении файла
write(<file name>, <new file name>) - метод позволяющий записать данные в архив с возможностью дать новое имя файлу <new file name>
extract() -
extractall() -

.file_size() - атрибут возвращающий оригинальный размер файла
.data_time() - атрибут возвращает дату изменения файла
.compress_size() - атрибут возвращает размер сжатого файла
.filename() - атрибут возвращает имя полное имя файла/путь


Модуль pickle
dump() - функция применяет сериализацию преобразуя python-объект в бинарный json (запись в файл)
load() - функция десериализует бинарный json файл в python-объект (чтение с файла)
dumps() - функция аналогична dump, только без записи в файл (преобразование объекта в бинарный вид)
loads() - функция аналогична load, только без чтения данных из файла (преобразование бинарной последовательности в объект)


Работа с памятью в Python
id() - функция для получения идентификатора объекта
is - оператор сравнения идентификаторов, идентичности
sys.intern() - модуль для использования общих ссылок типа str, на разны языках и символах
sys.getsizeof() - функция для получения реального размера объекта в байтах
copy() - модуль для поверхностного копирования объекта
deepcopy() - модуль для глубокого копирования объекта


Сбор мусора модуль GC
подсчёт ссылок - первый механизм сбора мусора
gc - (Garbage Collector) второй механизм сборки мусора
gc.enable() - включает автоматический сборщик мусора
gc.disable() - выключается автоматический сборщик мусора
gc.isenabled() - проверка состояния сборщика мусора True если вкл. False если выкл.
gc.collect(<value>) - запуск сборщика мусора на всех уровнях, необязательный аргумент <value> указывающий на конкретный уровень

sys.getrefcount() - функция для получения количества ссылок у объекта


Модуль Collection
namedtuple - подтип типа tuple а в котором к данным можно обращаться и по индексу и по имени
    typename - отвечает за имя создаваемого типа
    field_names - параметр отвечает за значения полей
    rename - параметр отвечает за игнорирование недопустимых значений
    defaults - параметр отвечает за установку значений полей по умолчанию
    module - аргумент задаёт имя при вызове типа класса namedtuple

    _fields - атрибут позволяющий увидеть кортеж имен полей
    _fields_default - атрибут позволяет увидеть словарь с именами полей к которым возможно присвоение значения по умолчанию
    _make() - конструктор namedtuple создающий экземпляр из передаваемого списка
    _asdict() - метод преобразования кортежа в словарь, где ключи - имена полей, а значения - присвоенные аргументы
    _replace() - метод позволяет изменить, создать новый экземпляр, поля именованного кортежа

defaultdict - подтип типа dict, но с механизмом автоматической генерации ключа в случае его отсутствия и значением по умолчанию


OrderedDict - подтип тапа dict, являющийся в своё время альтернативе словарей с дополнительным функционалом
    .update() - метод обновления значения по ключу
    .move_to_end() - метод позволяет переместить элемент либо в конец, либо в начало
    .popitem() - метод позволяет удалить элемент и вернуть его значение, стандартно работает по принцепу LastIn/FirstOut. С last флагом меняет принцип на FirstIn-FirstOut


Counter - подтип типа dict, специально разработанный для подсчёта количества хэшируемых объектов
    .update() - метод дополняет уже существующий словарь
    .clear() - метод очистки словаря
    .most_common(<value>) - метод возвращает итератор наиболее повторяемых элементов, параметр <value> ограничивает кол-во возвращаемых аргументов
    .elements() - метод возвращает итератор всех элементов по элементам их появления
    .total() - метод высчитывает сумму всех элементов словаря включая отрицательные
    .subtract() - метод выполняет действие объедение и вычитание значений элементов
    +, -, &, | - методы простого сложения, вычитания, пересечение и объединение, без нулевых и отр. Значений

ChainMap - подтип типа dict, объединяющий в себе множества словарей и механизмы их взаимодействия
    .maps - атрибут для вызова всех словарей
    .new_child(dict) - метод расширяющий ChainMap ставя новый словарь в начало
    .parents - атрибут для исключения первого элемента в ChainMap

Обработка ошибок
Наиболее частные типы исключений:
    IndexError - возникает когда индекс (например, для элемента списка) указан неправильно (или выходит за границы доступа)
    KetError - возникает при неверно указанном ключом
    NameError - возникает, если не удалось найти переменную с указанным именем
    SyntaxError - возникает при наличии ошибок в исходном коде
    TyperError - возникает при несоответствии типов, когда для обработки требуемых значений определенного типа, а передаётся значение другого
    FileNotFoundError - возникает когда файл не найден
    ValueError - возникает, когда в функцию передаётся аргумент с неподдерживаемым значением
    ZeroDivisionError - возникает при попытке деления на ноль

    try - блок в который помещается программный код, для отлавливания исключений
    except - блок который выполняется когда, происходит исключение
    else - выполняется в том случае если не возникает исключений при выполнении предыдущего блоки
    finally - выполняется после всех предыдущих блоков, вне зависимости от ситуации

    rains - ручной вызов исключительной ситуации, с возможностью указания комментария
    .args - аргумент для получения значения исключения в виде кортежа


Методики LBYL и EAFP:
LBYL - (Look Before You Leap) - посмотри перед прыжком
EAFP - (Easier to Ask Forgiveness than Permission) - проще извиниться, чем спрашивать разрешения
assert - оператор проверки утверждений


Повторение математических функций и функций для работы с коллекциями

abs() - функция преобразования числа в абсолютное значение. Модуль.
bin() - функция преобразования числа в двоичный формат. Префикс 0b.
hex() - функция преобразования числа в шестнадцатеричный формат. Префикс 0x.
oct() - функция преобразования числа в восьмеричный формат. Префикс 0o.
round(<number>, <ndigits>) - функция округления числа <number> до <ndigits> знаков после запятой.
pow(<base>, <exp>, <mod>) - функция возведения числа <base> в произвольную степень <exp>. Необязательный параметр mod - значение на которое необходимо произвести деление после операции степени.

int(<something>, <base>) - функция возвращает число из переданного значения <something> в системе счисления <base>. По умолчанию base = 10. Включено автоматическое преобразования в 10 систему.
float(<something) - функция возвращает число с плавающей точной из значения <something>
complex(real, imag) - функция используется для создания комплексного числа из значения <real> с мнимой частью <imag>
bool() - функция возвращает False если значение пусто или равно нулю, или None
str(<something>) - функция возвращает строковое представление переданного значение <something>
list() - преобразует итерируемый объект в список.
tuple() - преобразовывает итерируемый объект в кортеж.
set() - преобразовывает итерируемый объект в математическое множество.
frozenset() - преобразует итерируемый объект в математическое множество без возможности дальнейшего изменения.
dict() - функция преобразует последовательность пар ключ-значение в словарь.

ord() - функция преобразования символа в его Unicode
chr() - функция преобразования Unicode в символ

min(<something>, <key>, <default>) - функция принимает итерируемый объект <something> и возвращает наименьший.
    <key> - необязательное условие сортировки
    <default> - необязательный аргумент, возвращается если значение окажется пустым

max(<something>, <key>, <default>) - функция принимает итерируемый объект <something> и возвращает наибольшей.
    <key> - необязательное условие сортировки
    <default> - необязательный аргумент, возвращается если значение окажется пустым

len() - функция возвращает количество элементов в объекте. Объект может быть любым итерируемым элементом.
sum(<something>, <start>) - функция возвращает сумму итерируемых объектов. Необязательный аргумент start - значение от которого начинается отсчёт, по умолчанию равно 0.
reversed() - функция разворачивает итерируемый объект в обратном порядке.
sorted(<something>, <key>, <reversed>) - функция производит сортировку итерируемого объекта. По умолчанию - по возрастанию
    <key> - необязательный аргумент формирующий правила сортировки
    <reversed> - необязательный аргумент отвечающий за сортировку по убыванию

all() - функция возвращает значение True если все значения в итерируемом объекте Истины
any() - функция возвращает значение True если хотя бы одно значение в итерируемом объекте Истинно
enumerate() - функция преобразовывает передаваемый объект в нумерованный список. формата <значение> - <объект>
range(start, stop, step) - функция используется для генерации математических последовательностей от start до stop с заданным шагом step
zip()- функция преобразует итерируемый объект в один, с поэлементно сгруппированный список
id(<object>) - возвращает уникальный идентификатор для указанного объекта
input() - функция позволяет обеспечить ввод данных из консоли
isinstance(<object>, <type>) - функция для проверки принадлежности объекта <object> к передаваемому типу <type>
open() - функция позволяет открывать файлы для манипулирования с ними
print() - функция позволяет выводить данных в консоль
type(<object>) - функция возвращает тип данных передаваемого объекта <object>


Встроенные функции

callable(<object>) - функция проверки корневого типа данных или функции. True - если int, list, dict, frozenset, tuple, len и т.д.
hasattr(<object>, <attr>) - функция проверки наличия у объекта <object> атрибута <attr>. True если атрибут есть.
hash(<value>) - функция для хеширования переданного значения
help(<object>) - функция используется для получения информации о переданном объекте <object>
repr() - функция преобразовании информации в понятный интерпретатору вид
eval() - функция парсит переданный в неё объект и исполняет его. Имеет ограничение в передуваемом выражении (while, for, if, def, import, class, raise).
exec(<object>) - функция в которую передаётся объект <object> в виде кода, исполняется, и возвращает значение None.


Анонимные функции
Функции без объявления def, использующие lambda выражения


Функции как объекты
__name__ - возвращает имя функции
__doc__ - возвращает строку документирования
__default__ - возвращает строку с кортежем по умолчанию
__dict__ - пользовательский словарь с дополнительным функционалом


Вложенные функции, замыкания
nonlocal - префикс необходимый для объявления внутри функции не локальную переменную
__closure__ - атрибут выводящий список используемых в функции объектов


Модуль typing
-> <type> - типизация явно указывающая, что при выполнении кода будет возвращён тип <type>
__annotations__ - атрибут возвращающий аннотацию в виде словаря с <type>: <value>
typing - модуль позволяющий явно указать какие данные будут использованы при передачах значения и типов внутри значений, если это необходимо
    Union - объединяет несколько типов данных при их возвращении [int, float, str]
    Optional - демонстрирует возможности возвращения либо <type>, либо None
    Any - демонстрирует невозможность определить возвращаемый тип
    NoReturn - специальный тип демонстрирует, что функция никогда не возвращает значений


Декораторы
Декоратор - это встроенная возможность изменения поведения функции без вмешательства в код
@ - символ указывающий на декорирование функции
__name__ - возвращает информацию об имени
__doc__ - возвращает информацию о документации
functools.wraps - модуль для решения проблемы перетиров атрибутов, необходимо применять декоратор @functools.wraps(func)


Модуль functools
partial(func, *args, **kwargs) - функция для частичного применения функции
    .func - аргумент возвращающий исходную функцию
    .args - аргумент возвращающий позиционные аргументы
    .keywords - аргумент возвращающий именованные аргументы
update_wrapper(<func>, <original>) - функция декоратор, принимающая другие функции <func> и передающие ей атрибуты корневой функции <original>
    .__name__
    .__doc__

lru_cache - декоратор стратегии хеширования LRU
    maxsize=128 - аргумент максимального размера кэширования
    typed=False - атрибут типа кэширования разных аргументов
    hits - количество значений, которые lru_cache вернул из памяти, поскольку они присутствовали в кэше
    misses - количество значений, которые были вычислены, а не взяты из памяти
    maxsize - допустимый размер кеша
    currsize - текущий размер кеша
    .cache_info() - атрибут возвращающий заданные параметры кеширования
    .cache_clear() - атрибут для очистки кеша


Итерируемые объекты
Объекты в языке программирования Python по элементам которого можно пройтись последовательно, элемент за элементом
Итератор - специальный объект выдающий свои элементы по одному за раз
    next(<iter>, <def. value>) - встроенная функция итератора, возвращающая сл. элемент в последовательности. Исключение StopIterating
    iter(<object>) - функция преобразования коллекции в итерируемый объект

Магические методы - методы вызываемые функция, являющиеся обрамлёнными с двух сторон двумя нижними подчёркиваниями
.dir(<object>) - метод возвращает весь список доступных методов у передаваемого объекта <object>
.__iter__() - магические метод преобразовывающий итерируемый объект в итератор
.__next__() - магические метод обеспечивающий выдачу следующего элемента в итерируемом объекта
list
    .__len__() - метод возвращает длину списка, по умолчанию вызывается методом len()
    .__str__() - метод возвращает преобразованный список в виде строки


Генераторы
Функция генератор - это функция возвращающая итератор. Она выглядит как обычная функция за исключением оператора возвращения - yield, вместо return.
yield from <iterable> - функция заменяет цикл итерируемым объектом
Генераторы выражения - они подходят когда функцию можно записать в одно выражение


Модуль itertools
Модуль предназначен для создания итераторов.
Функции порождающие данные - бесконечно порождают итераторы:

count(<start>, <step>) - возвращает итератор бесконечно порождающий последовательность чисел от <start> с шагом <step>.
cycle(<iterable>) - циклично генерируют последовательность элементов итерируемого объекта <iterable>
repeat(<obj>, <times>) - возвращает итератор генерирующий <obj> <times> раз
starmap(<func>, <iterable>) - возвращает итератор <iterable> к элементам которого применяется функции <func>
accumulate(<iterable>, <func>, <initial>) - возвращает итератор <iterable>, элементами которого являются накопленные суммы или накопленные результаты функции <func> то <initial>

dropwhile(<predicate>, <iterable>) - возвращает итератор генерирующий элементы из <iterable> как только будет получено значение False в выражении <predicate>
takewhile(<predicate>, <iterable>) - возвращает итератор генерирующий элементы из <iterable> до тех пока пока <predicate> не вернёт False
filterfalse(<predicate>, <iterable>) - возвращает итератор генерирующий элементы <iterable> для которых выражение <predicate> ложно
compress(<iterable>, <selectors>) - возвращающий итератор генерирующий элементы <iterable> с условием приятия <selectors>
islice(<iterable>, <start=0>, <stop=len>, <step=1>) - возвращает итератор генерирующий элементы <iterable> с различными параметрами начала <start>, конца <stop> и шага <step>







